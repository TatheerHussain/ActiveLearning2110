Q: What is the smallest number of bits we would need to designate 5 different items?
A: ([5, 4, 3, 2], 2)
Tags: CS 2110, bits, 5 bits, value, representation

Q: How many different numbers can be represented by 7 bits?
A: ([64, 128, 32, 256], 1)
Tags: CS 2110, bits, 7 bits, value

Q: Which method is used in almost all computers manufactured today?
A: ([2’s Comp. 1’s Comp, Unsigned, Signed], 0)
Tags: CS 2110, binary, 2’s Complement, 1’s Complement, Unsigned, Signed

Q: Represent the binary number 1001 in all methods (Unsigned, Signed, 1’s, 2’s).
A: ([[9, -1, -6, -7], [-9, 0, -8, -6], [-7, -1, -6, -8], [9, -1, 6, -7]], 0)
Tags: CS 2110, binary, 2’s Complement, 1’s Complement, Unsigned, Signed

Q: Convert 1010 from 2’s complement to its decimal representation?
A: ([ -7, -6, 6, 10], 1)
Tags: CS 2110, 2’s complement, decimal
Q: Add 1100 and 1011 (2’s comp).
A: ([01111, 10011, 10111, 11011], 2)
Tags: CS 2110, 2’s complement, binary, addition

Q: When is sign extension necessary?
A: ([When you are adding two binary numbers of the same length, When you are subtracting two binary numbers and have a carry in, When your carry in and carry out are both equal to 1, When you are adding two binary numbers that are of different lengths], 3)
Tags: CS 2110, sign extension

Q: To negate a binary number, you flip the bits and add 1.
A: ([True, False], 0)
Tags: CS 2110, negation, binary, 2’s complement

Q: x << -2 is legal.
A: ([True, False], 1)
Tags: CS 2110, bit shift, bits, binary, legality

****



Picture:

Q: This is an N-Type MOS.
A: ([True, False], 0]
Tags: CS 2110, N-Type, MOS

Picture:

Q: This is a P-Type MOS.
A; ([True, False], 0)
Tags: CS 2110, P-Type, MOS







Picture:

Q: This image shows DeMorgan’s law.
A: ([True, False], 1)
Tags: CS 2110, DeMorgan’s law, DeMorgan, gate

Picture

Q: This image shows DeMorgan’s law.
A: ([True, False], 0)
Tags: CS 2110, DeMorgan’s law, DeMorgan, gate

Q: The basic multiplexer has…
A: ([[n outputs, n control lines, 2^n inputs], [1 output, 2n control lines, n inputs], [1 output, n control lines, 2^n inputs], [2^n outputs, 2 control lines, n inputs]], 2)
Tags: CS 2110, multiplexer

Q: What is address space?
A: ([The address where your house is, the definition of addressability, the amount of memory allocated for all possible addresses, all of the above], 2)
Tags: CS 2110, address space, memory

Q: Making decisions, inputs always producing the same outputs, and time-independent logic are characteristics of combinational logic circuits.
A: ([True, False], 0)
Tags: CS 2110, combinational logic circuits, time-independent logic

Q: Making decisions, inputs always producing the same outputs, and time-independent logic are characteristics of sequential logic circuits.
A: ([True, False], 1)
Tags: CS 2110, sequential logic circuits, time-independent logic

Q: Making decisions and storing information, outputs depending on inputs and state, and depending on input history are characteristics of sequential logic circuits.
A: ([True, False], 0)
Tags: CS 2110, sequential logic circuits, input history

Q: Making decisions and storing information, outputs depending on inputs and state, and depending on input history are characteristics of combinational logic circuits.
A: ([True, False], 1)
Tags: CS 2110, sequential logic circuits, input history

Q: A multiplexer is…
A: ([ is a device capable of converting audio or video signals into a different form, is a device that selects one of several analog or digital input signals and forwards the selected input into a single line, is the part of a CPU's control unit that holds the instruction currently being executed or decoded, all of the above], 1)
Tags: CS 2110, multiplexer, definition

Picture:

Q: What does the IR component do in the LC-3 Datapath?
A: ([handles basic math operations, converts signals into a different form, holds the instruction currently being executed, adds several input signals into the same line], 2)
Tags: LC-3, datapath, IR, instruction register, definition

Picture:

Q: What architecture does this depict?
A: ([Von Neumann architecture, Turing architecture, DeMorgan architecture, None of these], 0)
Tags: Von Neumann, architecture, PC, IR,  LC-3

Q: What does the PC (Program Counter) have in it?
A: ([the amount of instructions ever executed, the current instruction being executed, the address of the current instruction being executed, the address of the next instruction to be executed], 3)
Tags: Von Neumann, PC, IR, architecture, Program Counter,  LC-3

Q: The (Instruction Register) IR has the instruction currently being executed.
A: ([True, False], 0)
Tags: Von Neumann, IR, Instruction Register, instructions,  LC-3

Picture:

Q: What LC-3 process does this image depict?
A: ([AND, JSR, JMP, JSRR], 2)
Tags: LC-3, JMP, AND, JSR, JSRR, Von Neumann

Q: By combining ADD, AND, and NOT, which operations can you perform?
A: ([Addition, Or, Clear register, Subtract, And, All of the above, [Just addition, subtraction, and clear]], 5)
Tags: operations, ADD, AND, NOT, LC-3, instructions





Q: LC-3 has at least 3 different instructions for both load and add.
A: ([True, False], 1)
Tags: LC-3, instructions, Load, store, add

Q: what does the instruction LEA and ST do?
A: ([LEA puts the address represented by some label into memory and ST puts the contents of a memory location whose address is stored in memory at some label into a register, LEA puts the address represented by some label into memory and ST puts the contents of a register into an address specified by a label (address), LEA puts the contents of some label (address) into a register and ST puts the contents a register into an address specified by a label (address), LEA puts the contents of some label (address) into a register and ST puts the contents of a memory location whose address is stored in memory at some label into a register], 1)
Tags: LC-3, instructions, Load, store, LEA, ST

Q: What are the 3 components in a typical memory representation?
A: ([[the stack, register, and static memory], [the stack, alterable data, constant data], [the code, the heap, and static memory], [static memory, the stack, and the heap]], 3)
Tags: CS 2110, Memory, Memory allocation, stack, heap, static memory

Q: From low memory to high memory, in what order are the components in a typical memory representation arranged?
A: ([[static memory, stack, heap], [stack, heap, static memory], [static memory, heap, stack], [heap, stack, static memory]], 2)
Tags: CS 2110, Memory, Memory allocation, stack, heap, static memory

Q:What are the components of static memory?
A: ([[Heap, Code, and Stack], [Code, Constant Data, Alterable Data], [Alterable Data, Heap, Code], [Constant Data, Code, Stack]], 1)
Tags: CS 2110, Memory, Memory allocation, stack, heap, static memory

Q: The heap and the stack make up dynamic memory?
A: ([True, False], 0)
Tags: CS 2110, Memory, Memory allocation, stack, heap, dynamic memory, dynamic

Q: where are automatic variables in a typical memory allocation?
A: ([stack, heap, code, constant memory], 0)
Tags: CS 2110, Memory, Memory allocation, automatic variables, auto

Q: The auto keyword in C should never be used.
A: ([True, False], 0)
Tags: CS 2110, Memory, Memory allocation, automatic variables, auto

Q: Which is stored in the static area of memory?
A: ([A global variable, A variable that is global just to the functions in one file, A variable that is local to a function and retains its value, All of the above], 3)
Tags: CS 2110, static keyword, static, variables, memory


Q: Variables declared as extern do not have a scope across all files.
A: ([True, False], 1)
Tags: CS 2110, static keyword, extern, scope, variables

Q: Which variable keyword tells the compiler that the variable may change continually on its own?
A: ([register, extern, static, volatile], 3)
Tags: CS 2110, keyword, volatile, scope, variables

Q: a variable declared as “register” is…
A: ([likely to change its value on its own, telling the compiler that this variable should be kept in a register, visible across all files], 1)
Tags: CS 2110, static keyword, extern, scope, variables, register

Q: Which are storage class specifiers?
A: ([[auto, static, extern], [const, static, extern], [auto, static, volatile], [volatile, const, auto]], 0)
Tags: CS 2110, storage, class, specifiers, type, qualifiers

Q: const and volatile are storage class specifiers.
A: ([True, False] 1)
Tags: CS 2110, storage, class, specifiers, type, qualifiers

Q: RAM is ROM but not all ROM is RAM.
A: ([True, False], 1)
Tags: CS 2110, ROM, RAM

Q: Which function dynamically allocates memory?
A: ([malloc, free, ROM, extern], 0)
Tags: CS 2110, malloc, allocate, memory


Q: When dynamically allocated memory is no longer needed, it is returned using the function ...
A: ([malloc, realloc, free, extern], 2)
Tags: CS 2110, malloc, realloc, free, memory, allocation

Q: What is a Memory Leak?
A: ([Memory leak is when malloc returns an error, Memory leak is when too much memory is freed, Memory Leak occurs when the programmer loses track of memory allocated by malloc, Memory Leak is when realloc returns a smaller amount of memory than the programmer intended], 2)
Tags: CS 2110, memory allocation, malloc, free, realloc, memory, leak

Q: Unlike Java, C does not do automatic memory management due to efficiency reasons.
A: ([True, False], 0)
Tags: CS 2110, memory, allocation, Java, C

Q: what does the .ORIG directive do in Assembly?
A: ([initializes one location, sets aside n words in memory, is where to put the program, the end of the assembly program], 2)
Tags: CS 2110, assembly language, .ORIG, assembly

Q: Compared to JSR(R), TRAP has no protection mechanism.
A: ([True, False], 1)
Tags: CS 2110, assembly, language, TRAP, JSR(R)

Q: Compared to Polling, Interrupts can be significantly more efficient.
A: ([True, False], 0)
Tags: CS 2110, polling, interrupts, efficiency

Q: The information in registers persist when doing recursion in Assembly.
A: ([True, False] 1)
Tags: CS 2110, registers, recursion, persistence
